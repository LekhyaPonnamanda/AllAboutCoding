#include <stdio.h>
#include<stdlib.h>
typedef struct node nptr;
nptr *head,*temp,*ptr,*sln;
struct node 
  {
    int data;
    struct node *link;
  };
nptr *insert_begin(nptr *head,int ele);
nptr *duplicate(nptr *);
nptr *alternate_nodes_remove(nptr *);
void display(nptr *);
int main()
{
    printf("1.insert_beg\n 2.display\n 3.exit\n 4.duplicate remove\n 5.alternate nodes remove\n");
    while(1)
    {
        printf("\n enter ur choice\n");
        int ch,ele;
        scanf("%d",&ch);
        switch(ch)
        {
          case 1:printf("enter element\n");
                 scanf("%d",&ele);
                 head=insert_begin(head,ele); 
                 break;
          case 2:display(head);break;
          case 3:exit(1);
          case 4:head=duplicate(head);break;
          case 5:head=alternate_nodes_remove(head);break;
        }
    }
}
nptr* insert_begin(nptr *head,int ele)
{
    ptr=(nptr *)malloc(sizeof(nptr));
    ptr->data=ele; ptr->link=NULL;
    if(head==NULL)
    {
        head=ptr;
    }
    else
    {
       ptr->link=head;
       head=ptr;
    }
    return head;
}
void display(nptr *head)
{
    temp=head;
    while((temp->link)!=NULL)
    {
        printf("%d ",temp->data);
        temp=temp->link;
    }
    printf("%d ",temp->data);
}
nptr *duplicate(nptr *head)
{
    temp=head;
    while((temp->link)!=NULL && temp!=NULL)
    {
        sln=temp;
        temp=temp->link;
        if(sln->data==temp->data)
        {
             sln->link=temp->link;
             temp->link=NULL;
             free(temp);
             temp=sln->link;
        }
    }
    return head;
}
nptr *alternate_nodes_remove(nptr *head)
{
   temp=head;
   while(temp->link!=NULL && temp!=NULL)
    {
        sln=temp;
        temp=temp->link;
        sln->link=temp->link;
        temp->link=NULL;
        free(temp);
        temp=sln->link;
    }
    return head;
}

